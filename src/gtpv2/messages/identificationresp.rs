use crate::gtpv2::{
    errors::*,
    header::*,
    messages::{commons::*, ies::*},
    utils::*,
};

// According to 3GPP TS 29.274 V17.10.0 (2023-12)

pub const IDENTIFICATION_RESP: u8 = 129;

// Definition of GTPv2-C Identification Response Message

#[derive(Debug, Clone, PartialEq, Eq)]
pub struct IdentificationResponse {
    pub header: Gtpv2Header,
    pub cause: Cause,
    pub imsi: Option<Imsi>,
    pub mmctx: Option<MmContext>,
    pub trace_info: Option<TraceInformation>,
    pub ue_usage_type: Option<IntegerNumber>,
    pub monitor_event_info: Vec<MonitoringEventInformation>,
    pub monitor_even_ext_info: Vec<MonitoringEventExtensionInfo>,
    pub ext_trace_info: Option<ExtendedTraceInformation>,
    pub private_ext: Vec<PrivateExtension>,
}

impl Default for IdentificationResponse {
    fn default() -> Self {
        let hdr = Gtpv2Header {
            msgtype: IDENTIFICATION_RESP,
            teid: Some(0),
            ..Gtpv2Header::default()
        };
        IdentificationResponse {
            header: hdr,
            cause: Cause::default(),
            imsi: None,
            mmctx: None,
            trace_info: None,
            ue_usage_type: None,
            monitor_event_info: vec![],
            monitor_even_ext_info: vec![],
            ext_trace_info: None,
            private_ext: vec![],
        }
    }
}

impl Messages for IdentificationResponse {
    fn marshal(&self, buffer: &mut Vec<u8>) {
        self.header.marshal(buffer);
        let elements = self.tovec();
        elements.into_iter().for_each(|k| k.marshal(buffer));
        set_msg_length(buffer);
    }

    fn unmarshal(buffer: &[u8]) -> Result<Self, GTPV2Error> {
        let mut message = IdentificationResponse::default();
        match Gtpv2Header::unmarshal(buffer) {
            Ok(i) => message.header = i,
            Err(j) => return Err(j),
        }

        if message.header.msgtype != IDENTIFICATION_RESP {
            return Err(GTPV2Error::MessageIncorrectMessageType);
        }

        let offset = message.header.length as usize + MANDATORY_HDR_LENGTH;

        if buffer.len() >= offset {
            match InformationElement::decoder(&buffer[MAX_HEADER_LENGTH..offset]) {
                Ok(i) => match message.fromvec(i) {
                    Ok(_) => Ok(message),
                    Err(j) => Err(j),
                },
                Err(j) => Err(j),
            }
        } else {
            Err(GTPV2Error::MessageInvalidMessageFormat)
        }
    }

    fn tovec(&self) -> Vec<InformationElement> {
        let mut elements: Vec<InformationElement> = vec![];

        elements.push(self.cause.clone().into());

        if let Some(i) = self.imsi.clone() {
            elements.push(i.into());
        }

        if let Some(i) = self.mmctx.clone() {
            elements.push(i.into());
        }

        if let Some(i) = self.trace_info.clone() {
            elements.push(i.into());
        }

        if let Some(i) = self.ue_usage_type.clone() {
            elements.push(i.into());
        }

        self.monitor_event_info
            .iter()
            .for_each(|x| elements.push(x.clone().into()));

        self.monitor_even_ext_info
            .iter()
            .for_each(|x| elements.push(x.clone().into()));

        if let Some(i) = self.ext_trace_info.clone() {
            elements.push(i.into());
        }

        self.private_ext
            .iter()
            .for_each(|x| elements.push(InformationElement::PrivateExtension(x.clone())));

        elements
    }

    fn fromvec(&mut self, elements: Vec<InformationElement>) -> Result<bool, GTPV2Error> {
        let mut mandatory = false;
        for e in elements.iter() {
            match e {
                InformationElement::Cause(j) => {
                    if let (0, false) = (j.ins, mandatory) {
                        self.cause = j.clone();
                        mandatory = true;
                    }
                }
                InformationElement::Imsi(j) => {
                    if let (0, true) = (j.ins, self.imsi.is_none()) {
                        self.imsi = Some(j.clone());
                    }
                }
                InformationElement::MmContext(j) => {
                    if let (0, true) = (j.get_ins(), self.mmctx.is_none()) {
                        self.mmctx = Some(j.clone());
                    }
                }
                InformationElement::TraceInformation(j) => {
                    if let (0, true) = (j.ins, self.trace_info.is_none()) {
                        self.trace_info = Some(j.clone());
                    }
                }
                InformationElement::IntegerNumber(j) => {
                    if let (0, true) = (j.ins, self.ue_usage_type.is_none()) {
                        self.ue_usage_type = Some(j.clone());
                    }
                }
                InformationElement::MonitoringEventInformation(j) => {
                    if j.ins == 0 {
                        self.monitor_event_info.push(j.clone());
                    }
                }
                InformationElement::MonitoringEventExtensionInfo(j) => {
                    if j.ins == 0 {
                        self.monitor_even_ext_info.push(j.clone());
                    }
                }
                InformationElement::ExtendedTraceInformation(j) => {
                    if let (0, true) = (j.ins, self.ext_trace_info.is_none()) {
                        self.ext_trace_info = Some(j.clone());
                    }
                }
                InformationElement::PrivateExtension(j) => self.private_ext.push(j.clone()),
                _ => (),
            }
        }
        Ok(true)
    }
}

#[test]
fn test_identification_resp_unmarshal() {
    let encoded: [u8; 500] = [
        0x48, 0x81, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x02, 0x00, 0x02,
        0x00, 0x0a, 0x00, 0x01, 0x00, 0x08, 0x00, 0x99, 0x41, 0x55, 0x01, 0x91, 0x16, 0x78, 0xf3,
        0x6b, 0x01, 0x88, 0x00, 0x98, 0x27, 0x81, 0x27, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
        0x10, 0x03, 0x02, 0x07, 0x08, 0x03, 0x03, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04,
        0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x03, 0x02, 0x07,
        0x08, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e,
        0x0f, 0x10, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d,
        0x0e, 0x0f, 0x10, 0x03, 0x03, 0x09, 0x0a, 0x01, 0x02, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x05, 0x00, 0x00, 0x07,
        0xd0, 0x00, 0x00, 0x1f, 0x40, 0x00, 0x00, 0x07, 0xd0, 0x00, 0x00, 0x1f, 0x40, 0x04, 0x01,
        0x02, 0x03, 0x04, 0x04, 0x01, 0x02, 0x03, 0x04, 0x04, 0x01, 0x02, 0x03, 0x04, 0x00, 0xad,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0x04, 0x01, 0x02, 0x03, 0x04, 0x04, 0x01, 0x02, 0x03, 0x04, 0x01,
        0x03, 0x04, 0x01, 0x02, 0x03, 0x04, 0x04, 0x01, 0x02, 0x03, 0x04, 0x02, 0x00, 0x22, 0x00,
        0x0c, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x12, 0x34,
        0x56, 0x78, 0x12, 0x34, 0x56, 0x78, 0x12, 0x34, 0x56, 0x78, 0x01, 0x02, 0x03, 0x04, 0x05,
        0x06, 0x07, 0x08, 0x00, 0x23, 0x00, 0x0d, 0x74, 0x65, 0x73, 0x74, 0x32, 0x2e, 0x61, 0x70,
        0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x12, 0x34, 0x56, 0x78, 0x12, 0x34, 0x56, 0x78, 0x12, 0x34,
        0x56, 0x78, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x04, 0x01, 0x02, 0x03, 0x04,
        0x04, 0x01, 0x02, 0x03, 0x04, 0x02, 0xbb, 0x00, 0x03, 0x00, 0x03, 0x03, 0x03, 0xbd, 0x00,
        0x1f, 0xa0, 0x00, 0x00, 0xff, 0xff, 0x10, 0x73, 0x63, 0x65, 0x66, 0x2e, 0x65, 0x78, 0x61,
        0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff,
        0xff, 0xee, 0xaa, 0xce, 0x00, 0x1c, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x65, 0x78,
        0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff,
    ];
    let mut decoded = IdentificationResponse {
        header: Gtpv2Header {
            msgtype: IDENTIFICATION_RESP,
            piggyback: false,
            message_prio: None,
            length: 496,
            teid: Some(0),
            sqn: 0x68,
        },
        cause: Cause {
            value: 10,
            ..Cause::default()
        },
        imsi: Some(Imsi {
            length: 0x08,
            imsi: "991455101961873".to_string(),
            ..Imsi::default()
        }),
        ue_usage_type: Some(IntegerNumber {
            length: 3,
            number: vec![3, 3, 3],
            ..IntegerNumber::default()
        }),
        monitor_event_info: vec![MonitoringEventInformation {
            t: MONITOREVENTINFO,
            length: 31,
            ins: 0,
            nscf: false,
            nsui: true,
            nsur: false,
            scef_ref_id: 0xffff,
            scef_id: String::from("scef.example.com"),
            rem_nbr_reports: 0xff,
            ext_scef_ref_id: Some(0xffffeeaa),
        }],
        monitor_even_ext_info: vec![MonitoringEventExtensionInfo {
            t: MONITEVENTEXTINFO,
            length: 28,
            ins: 0,
            scef_ref_id: 0,
            scef_id: String::from("example.com"),
            rmplrt: Some(0xff),
            ext_scef_ref_id: Some(0xffffffffffffffff),
        }],
        ..IdentificationResponse::default()
    };
    let mmctx = MmContextEpsSecurityContextQuadruplets {
        t: MMCTXEPSSECCTXQ,
        length: 392,
        ins: 0,
        sec_mode: SecurityMode::EpsSecurityContextAndQuadruplets,
        ksi: 0,
        nas_integrity: NasIntegrityProtectionValues::NoIntegrity,
        nas_cipher: NasCipherValues::Eea1,
        nas_dl_count: 0x002700ff,
        nas_ul_count: 0x00ffffff,
        kasme: [0xff; 32],
        auth_quadruplets: Some(vec![AuthQuadruplet {
            rand: [
                0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e,
                0x0f, 0x10,
            ],
            xres: vec![0x02, 0x07, 0x08],
            autn: vec![0x03, 0x09, 0x0a],
            kasme: [
                0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00,
            ],
        }]),
        auth_quintuplets: Some(vec![AuthQuintuplet {
            rand: [
                0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e,
                0x0f, 0x10,
            ],
            xres: vec![0x02, 0x07, 0x08],
            ck: [
                0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e,
                0x0f, 0x10,
            ],
            ik: [
                0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e,
                0x0f, 0x10,
            ],
            autn: vec![0x03, 0x09, 0x0a],
        }]),
        drx_params: Some([0x01, 0x02]),
        next_hop: Some([0xaa; 32]),
        ncc: Some(0x05),
        subscr_ue_ambr: Some(AmbrMM {
            uplink: 2000,
            downlink: 8000,
        }),
        used_ue_ambr: Some(AmbrMM {
            uplink: 2000,
            downlink: 8000,
        }),
        ue_ntwk_cap: Some(vec![0x01, 0x02, 0x03, 0x04]),
        ms_ntwk_cap: Some(vec![0x01, 0x02, 0x03, 0x04]),
        mei: Some(vec![0x01, 0x02, 0x03, 0x04]),
        access_res: AccessRestrictionMM::from(0x00),
        old_eps_sec_ctx: Some(OldEpsSecurityContext {
            old_ksi: 5,
            old_ncc: Some(5),
            old_kasme: [0xff; 32],
            old_next_hop: Some([0xff; 32]),
        }),
        vdn_pref_ue_usage: Some(vec![0x01, 0x02, 0x03, 0x04]),
        ue_radio_cap_for_paging: Some(vec![0x01, 0x02, 0x03, 0x04]),
        ext_access_res: Some(ExtendedAccessRestrictionMM::from(0x03)),
        ue_add_security_cap: Some(vec![0x01, 0x02, 0x03, 0x04]),
        ue_nr_security_cap: Some(vec![0x01, 0x02, 0x03, 0x04]),
        apn_rate_controls: Some(vec![
            ApnRateControlStatusMM {
                apn: "test.apn.com".to_string(),
                uplink_rate_limit: 0x12345678,
                nbr_of_exception_reports: 0x12345678,
                downlink_rate_limit: 0x12345678,
                apn_rate_control_status_validity: [0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08],
            },
            ApnRateControlStatusMM {
                apn: "test2.apn.com".to_string(),
                uplink_rate_limit: 0x12345678,
                nbr_of_exception_reports: 0x12345678,
                downlink_rate_limit: 0x12345678,
                apn_rate_control_status_validity: [0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08],
            },
        ]),
        core_nw_res: Some(vec![0x01, 0x02, 0x03, 0x04]),
        ue_radio_cap_id: Some(vec![0x01, 0x02, 0x03, 0x04]),
        ensct: Some(0x02),
    };
    decoded.mmctx = Some(mmctx.into());
    let message = IdentificationResponse::unmarshal(&encoded).unwrap();
    assert_eq!(message, decoded);
}

#[test]
fn test_identification_resp_marshal() {
    let encoded: [u8; 500] = [
        0x48, 0x81, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x02, 0x00, 0x02,
        0x00, 0x0a, 0x00, 0x01, 0x00, 0x08, 0x00, 0x99, 0x41, 0x55, 0x01, 0x91, 0x16, 0x78, 0xf3,
        0x6b, 0x01, 0x88, 0x00, 0x98, 0x27, 0x81, 0x27, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
        0x10, 0x03, 0x02, 0x07, 0x08, 0x03, 0x03, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04,
        0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x03, 0x02, 0x07,
        0x08, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e,
        0x0f, 0x10, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d,
        0x0e, 0x0f, 0x10, 0x03, 0x03, 0x09, 0x0a, 0x01, 0x02, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
        0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x05, 0x00, 0x00, 0x07,
        0xd0, 0x00, 0x00, 0x1f, 0x40, 0x00, 0x00, 0x07, 0xd0, 0x00, 0x00, 0x1f, 0x40, 0x04, 0x01,
        0x02, 0x03, 0x04, 0x04, 0x01, 0x02, 0x03, 0x04, 0x04, 0x01, 0x02, 0x03, 0x04, 0x00, 0xad,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0x04, 0x01, 0x02, 0x03, 0x04, 0x04, 0x01, 0x02, 0x03, 0x04, 0x01,
        0x03, 0x04, 0x01, 0x02, 0x03, 0x04, 0x04, 0x01, 0x02, 0x03, 0x04, 0x02, 0x00, 0x22, 0x00,
        0x0c, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x12, 0x34,
        0x56, 0x78, 0x12, 0x34, 0x56, 0x78, 0x12, 0x34, 0x56, 0x78, 0x01, 0x02, 0x03, 0x04, 0x05,
        0x06, 0x07, 0x08, 0x00, 0x23, 0x00, 0x0d, 0x74, 0x65, 0x73, 0x74, 0x32, 0x2e, 0x61, 0x70,
        0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x12, 0x34, 0x56, 0x78, 0x12, 0x34, 0x56, 0x78, 0x12, 0x34,
        0x56, 0x78, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x04, 0x01, 0x02, 0x03, 0x04,
        0x04, 0x01, 0x02, 0x03, 0x04, 0x02, 0xbb, 0x00, 0x03, 0x00, 0x03, 0x03, 0x03, 0xbd, 0x00,
        0x1f, 0xa0, 0x00, 0x00, 0xff, 0xff, 0x10, 0x73, 0x63, 0x65, 0x66, 0x2e, 0x65, 0x78, 0x61,
        0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff,
        0xff, 0xee, 0xaa, 0xce, 0x00, 0x1c, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x65, 0x78,
        0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff,
    ];
    let mut decoded = IdentificationResponse {
        header: Gtpv2Header {
            msgtype: IDENTIFICATION_RESP,
            piggyback: false,
            message_prio: None,
            length: 496,
            teid: Some(0),
            sqn: 0x68,
        },
        cause: Cause {
            value: 10,
            ..Cause::default()
        },
        imsi: Some(Imsi {
            length: 0x08,
            imsi: "991455101961873".to_string(),
            ..Imsi::default()
        }),
        ue_usage_type: Some(IntegerNumber {
            length: 3,
            number: vec![3, 3, 3],
            ..IntegerNumber::default()
        }),
        monitor_event_info: vec![MonitoringEventInformation {
            t: MONITOREVENTINFO,
            length: 31,
            ins: 0,
            nscf: false,
            nsui: true,
            nsur: false,
            scef_ref_id: 0xffff,
            scef_id: String::from("scef.example.com"),
            rem_nbr_reports: 0xff,
            ext_scef_ref_id: Some(0xffffeeaa),
        }],
        monitor_even_ext_info: vec![MonitoringEventExtensionInfo {
            t: MONITEVENTEXTINFO,
            length: 28,
            ins: 0,
            scef_ref_id: 0,
            scef_id: String::from("example.com"),
            rmplrt: Some(0xff),
            ext_scef_ref_id: Some(0xffffffffffffffff),
        }],
        ..IdentificationResponse::default()
    };
    let mmctx = MmContextEpsSecurityContextQuadruplets {
        t: MMCTXEPSSECCTXQ,
        length: 392,
        ins: 0,
        sec_mode: SecurityMode::EpsSecurityContextAndQuadruplets,
        ksi: 0,
        nas_integrity: NasIntegrityProtectionValues::NoIntegrity,
        nas_cipher: NasCipherValues::Eea1,
        nas_dl_count: 0x002700ff,
        nas_ul_count: 0x00ffffff,
        kasme: [0xff; 32],
        auth_quadruplets: Some(vec![AuthQuadruplet {
            rand: [
                0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e,
                0x0f, 0x10,
            ],
            xres: vec![0x02, 0x07, 0x08],
            autn: vec![0x03, 0x09, 0x0a],
            kasme: [
                0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00,
            ],
        }]),
        auth_quintuplets: Some(vec![AuthQuintuplet {
            rand: [
                0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e,
                0x0f, 0x10,
            ],
            xres: vec![0x02, 0x07, 0x08],
            ck: [
                0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e,
                0x0f, 0x10,
            ],
            ik: [
                0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e,
                0x0f, 0x10,
            ],
            autn: vec![0x03, 0x09, 0x0a],
        }]),
        drx_params: Some([0x01, 0x02]),
        next_hop: Some([0xaa; 32]),
        ncc: Some(0x05),
        subscr_ue_ambr: Some(AmbrMM {
            uplink: 2000,
            downlink: 8000,
        }),
        used_ue_ambr: Some(AmbrMM {
            uplink: 2000,
            downlink: 8000,
        }),
        ue_ntwk_cap: Some(vec![0x01, 0x02, 0x03, 0x04]),
        ms_ntwk_cap: Some(vec![0x01, 0x02, 0x03, 0x04]),
        mei: Some(vec![0x01, 0x02, 0x03, 0x04]),
        access_res: AccessRestrictionMM::from(0x00),
        old_eps_sec_ctx: Some(OldEpsSecurityContext {
            old_ksi: 5,
            old_ncc: Some(5),
            old_kasme: [0xff; 32],
            old_next_hop: Some([0xff; 32]),
        }),
        vdn_pref_ue_usage: Some(vec![0x01, 0x02, 0x03, 0x04]),
        ue_radio_cap_for_paging: Some(vec![0x01, 0x02, 0x03, 0x04]),
        ext_access_res: Some(ExtendedAccessRestrictionMM::from(0x03)),
        ue_add_security_cap: Some(vec![0x01, 0x02, 0x03, 0x04]),
        ue_nr_security_cap: Some(vec![0x01, 0x02, 0x03, 0x04]),
        apn_rate_controls: Some(vec![
            ApnRateControlStatusMM {
                apn: "test.apn.com".to_string(),
                uplink_rate_limit: 0x12345678,
                nbr_of_exception_reports: 0x12345678,
                downlink_rate_limit: 0x12345678,
                apn_rate_control_status_validity: [0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08],
            },
            ApnRateControlStatusMM {
                apn: "test2.apn.com".to_string(),
                uplink_rate_limit: 0x12345678,
                nbr_of_exception_reports: 0x12345678,
                downlink_rate_limit: 0x12345678,
                apn_rate_control_status_validity: [0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08],
            },
        ]),
        core_nw_res: Some(vec![0x01, 0x02, 0x03, 0x04]),
        ue_radio_cap_id: Some(vec![0x01, 0x02, 0x03, 0x04]),
        ensct: Some(0x02),
    };
    decoded.mmctx = Some(mmctx.into());
    let mut buffer: Vec<u8> = vec![];
    decoded.marshal(&mut buffer);
    //buffer.iter().enumerate().for_each( |x| if (x.0+1) % 16 != 0 {print!("{:#04x},", x.1)} else {println!("{:#04x},", x.1)});
    assert_eq!(buffer, encoded);
}
